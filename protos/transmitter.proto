syntax = "proto3";

package lan_data_transmitter.model;
option csharp_namespace = "LanDataTransmitter.Model";

service Transmitter {
    rpc Connect (ConnectRequest) returns (ConnectReply);
    rpc Disconnect (DisconnectRequest) returns (DisconnectReply);
    rpc Pull (PullRequest) returns (stream PullReply); // C <- S

    rpc PushText (PushTextRequest) returns (PushTextReply); // C -> S
    rpc PushFile (PushFileRequest) returns (PushFileReply); // C -> S
    rpc PushFileChunks (stream PushFileChunksRequest) returns (PushFileChunksReply); // C -> S
    rpc PullFileChunks (PullFileChunksRequest) returns (stream PullFileChunksReply); // C <- S
    // rpc PushTextEdit (PushTextEditRequest) returns (PushTextEditReply); // C -> S
}

// Connect

message ConnectRequest {
    string clientName = 1;
}

message ConnectReply {
    bool accepted = 1;
    string clientId = 2;
}

// Disconnect

message DisconnectRequest {
    string clientId = 1;
}

message DisconnectReply {
    bool accepted = 1;
}

// Pull

message PullRequest {
    string clientId = 1;
}

message PullReply {
    bool accepted = 1;
    PulledType type = 2;

    oneof data {
        PulledTextReply pulledText = 3;
        PulledFileReply pulledFile = 4;
        // PulledTextEditReply pulledTextEdit = 5;
    }
}

enum PulledType {
    DISCONNECT = 0;
    TEXT = 1;
    FILE = 2;
    // TEXT_EDIT = 3;
}

// Text

message PushTextRequest {
    string clientId = 1;
    TextMessage text = 2;
}

message PushTextReply {
    bool accepted = 1;
    string messageId = 2;
}

message PulledTextReply {
    string messageId = 1;
    TextMessage text = 2;
}

message TextMessage {
    uint64 timestamp = 1;
    string text = 2; // line separator always use CRLF
}

// File

message PushFileRequest {
    string clientId = 1;
    FileMessage file = 2;
}

message PushFileReply {
    bool accepted = 1;
    string messageId = 2;
}

message PulledFileReply {
    string messageId = 1;
    FileMessage file = 3;
}

message FileMessage {
    uint64 timestamp = 1;
    string filename = 2;
    uint32 filesize = 3;
    bool direct = 4;
    bytes data = 5; // use this field rather than new request when direct is true
}

message PushFileChunksRequest {
    string clientId = 1;
    string messageId = 2;
    FileChunk chunk = 3;
}

message PushFileChunksReply {
    bool accepted = 1;
}

message PullFileChunksRequest {
    string clientId = 1;
    string messageId = 2;
}

message PullFileChunksReply {
    bool accepted = 1;
    FileChunk chunk = 2;
}

message FileChunk {
    uint32 start = 1;
    uint32 length = 2;
    bytes data = 3;
}

// Text Edit

/*
message PushTextEditRequest {
    string clientId = 1;
    string messageId = 2;
    TextMessage text = 3;
}

message PushTextEditReply {
    bool accepted = 1;
}

message PulledTextEditReply {
    string messageId = 1;
    TextMessage text = 2;
}
*/
